Learning JavaScript 3rd Edtion - Setting up Package with git, eslint, gulp, etc..
- The following commands will be combination of the terminal(command prompt) and text editor.


1) Create a project directory. That's a folder containing all your project files. This folder is known as the root directory (aka. root folder)

2) Next open the terminal for mac / linux or command prompt for windows. For windows user if you would like to be able to run linux commands and have syntax highlighting then I recommend downloading the application Cmder. Get it at: http://cmder.net/ -- Note: This program comes in a zip file. When you extract it. You can just run it from the directory you extracted it too. If you would like to make it look and act like a regular windows program read 'Installing Cmder like a Boss'.

				Mac and Linux Users Skip this section
			
			Installing Cmder like a Boss
			
			If you are windows user then I recommend using Cmder for all your CLI (Command Line Interface) commands. That's your command prompt.
			To obtain a FREE copy of Cmder. Download it at http://cmder.net/  You will be given two options [ min  and full ]. I recommend you download the full edition.   
			
			Next bookmark this page so you can come back and learn the shortcuts and shell commands later.
			
			The simple ups and downs of the application. Cmder is a portable application. Meaning you can download and place it on a flash drive and use it on any computer using the flash drive you put it on. That's perfect if you are on the move and want a syntax highlighting terminal. But if you only want it on a single computer and would like to be able to find it either in your Task Manager or Start Window then we have a little bit of a challenge.
			
			Making Cmder look and feel like a regular windows application. After downloading and extracting Cmder. 
				- Open another file explorer window; shortcut (windows key + E).
				- In this new window we will go into the C:\Program Files  directory.
				- Now in the directory that contains your Cmder folder. Copy or Cut the Cmder Folder and Paste it into the Program Files directory.
				
				- Next we will will add it to our applications list
				- Find icon for any application in your application list. Right-click on the icon and select "Open file in location"
					or in a new File Explorer windows go the following directory:
					
					C:\ProgramData\Microsoft\Windows\Start Menu\Programs
					
				- Here's were it gets a little tricky. 
				- In your C:\Programs Files\Cmder\ directory right-click on the Cmder.exe application.
				- Next Select: Send to > Desktop (Create Shortcut)
				- You can now close the Cmder File Explorer Window
				- Now make sure you can see your new shortcut on desktop and the File Explorer Window (C:\ProgramData\Microsoft\Windows\Start Menu\Programs)
				- From the Desktop. Select and Drag Cmder shortcut onto and into the File Explorer Window (C:\ProgramData\Microsoft\Windows\Start Menu\Programs) 
				- Confirm the move.
				You should now see Cmder when you click on the windows button and view all your applications. 
				
3) Install SublimeText3 (recommended):

4) Homebrew (Mac and Windows): Package Managers
	Package Mangers are great tools for installing programs quickly through the CLI (command line interface). If you aren't familiar with the CLI then this will help.
	
	Mac Users: 
		Open a web browser and your terminal. In your web browser go to: http://brew.sh/  Next in your terminal copy and paste in the install command from the website. Run the install process. After installation is complete. Close the terminal and open it again.
	
	Windows Users: 
		Open a web browser and your command prom
		pt (Cmder). In your web browser go to: https://chocolatey.org/install  Next in your command prompt copy and paste in the Cmd.exe command from the website. Run through the install. You might have to be in Administrator mode to run this command. If you are using Cmder. Locate the green plus box in the lower-right of the Cmder application window. Click on the drop-down arrow next to it. Hover over  1:{cmd} and select 1:{Cmder as Admin}. Then try and run the code again. If the error persists. Then just run the command in the standard command prompt as Administrator. After installation is complete. Close the command prompt and open it again.


5) In the your Terminal change the directory (cd) to your project directory. Once you are in the your project root directory type the commands:
		
	Installing NodeJS
		Mac: 
			- brew update
			- brew doctor
			- export PATH="/usr/local/bin:$PATH"
			- brew install node
			- brew upgrade
			-- close the terminal and re-open
			- node -v
			- npm -v
		Windows: 
			- choco install nodejs.install
			- choco upgrade nodejs.install
			-- close the command prompt and re-open
			- node -v
			- npm -v
				
				If you do not see the version for either node or npm. Then you will have to set the global variables manually.
				///// Need detail explanation
			
	Installing Git
		Mac:
			- brew install git
			- brew updgrade
			-- close terminal and re-open
		Windows: 
			- choco install git.install
			- choco upgrade git.install
			-- close terminal and re-open
	
6) Initializing Git
	
	In the terminal type the command: git init

7) Create a file in your root directory called: .gitignore    (make sure it has a perior infront of it)
	
	Edit the .gitignore file and add in the following lines:
		
		# npm degugging logs
		*.log

		# project dependencies
		node_modules

		# OSX folder attributes
		.DS_Store

		# temporary files
		*.tmp
		*~ 

8) After you create .gitignore and save the changes made to it. Return back to your terminal window and type: 
			
			git status
	
9) You may or may not see a list of items in red. If all you see is .gitignore then that means you only have that file in your root directory. If you see more then it means you did not start from scratch. That is ok. (remember this isnt changing your files, just your repository. It's a log)
		
		Next what you will want to do is add the files to git respository. 
		You can do this one at a time like so:
			
				git add .gitignore
		
		or you  can add all at one like this:
		
				git add -A
			
10) After adding the file(s) you will need to commit your update/changes. Do this by typing
	
		git commit -m "this is my commit message"  (-m states that you are creating a message for the git update/change and anything in the double quotes is the message. So I recommend you change the message to reflect what you are updating.)
			
11) If you would like to see your past commit messages, in the console type:
		(https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History)
	
			git log
			
12) Next create a README.md file (either through the console or text editor)
		
		Using the equal sign you can set differnt levels of Headings
		= h1, == h2, === h3, ==== h4, ===== h5, ====== h6

13) After you create the README.md add it to the git respository. Commit it and add a message. Check the status and the log.

--- Take a quick break. In the section: I will presume you already installed NodeJS. 

14) Create a file called: package.json and fill it with this data. For now just know this contains information we need to do the conversion. After you add the data. Save it and close it. Then add it to the git respository.

		{
		  "name": "es6cvt",
		  "version": "1.0.0",
		  "description": "ES6 Conversion Package Only",
		  "main": "index.js",
		  "scripts": {
			"test": "echo \"Error: no test specified\" && exit 1"
		  },
		  "author": "",
		  "license": "ISC",
		  "dependencies": {
			"underscore": "^1.8.3"
		  },
		  "devDependencies": {
			"babel-preset-es2015": "^6.18.0",
			"gulp": "^3.9.1",
			"gulp-babel": "^6.1.2",
			"gulp-eslint": "^3.0.1"
		  }
		}

15) Now in your terminal type:
		
		npm install 
		
		(What this will do is look into the package.json file. look at the dependencies and devDependencies. It will then look online in the npm directory and add the dependencies to your directory. These dependencies are just scripts (libraries) people have created to do certain tasks)

16) Installing Gulp: 
		
		If you have never installed Gulp: then you will need to install it globally first: TYPE in the Terminal:  npm install -g gulp
		You only need to do this globally once for every new machine, NOT project just the machine.
		
		For each project type this:		npm install --save-dev gulp
		
17) Next the file: 	gulpfile.js  -- Edit the file and place the following code inside
	(unnder the gulp tasks and node source change the directories to match your file structure and the files you want to lint and transpile)

			const gulp = require('gulp');
			const babel = require('gulp-babel');
			const eslint = require('gulp-eslint');
			
			gulp.task('default', function(){
				
				// Gulp tasks go here // this use eslint to check syntax when transpiled
				gulp.src(["es6/*.js"])
					.pipe(eslint())
					.pipe(eslint.format());
					
				// Node source // copies and converts all .js files places them in dist/ directory
				gulp.src("es6/*.js")
					.pipe(babel())
					.pipe(gulp.dest("dist/"));
			});

18) Create a file in the root directory called:   .babelrc
				
		Edit the file and add: 	{ "presets": ["es2015"] }

19) Create a file in the root called: 		.eslintrc
	(Read up on eslint at: http://eslint.org/ to add or remove syntax transpile rules)
		
		Edit the file and add: 
		
			{
				"env": {
					"browser": true,
					"es6": true,
					"node": true
				},
				"extends": "eslint:recommended",
				"parserOptions": {
					"sourceType": "module"
				},
				"rules": {
					"indent": [
						2,
						"tab"
					],
					"linebreak-style": [
						0,
						"unix"
					],
					"semi": [
						2,
						"always"
					]
				}
			}				
			

20) In the Terminal Type:		gulp

21) Check your error, fix if desired. Check the dist directory for the converted ES6 to ES5. Test your application.


		
			




